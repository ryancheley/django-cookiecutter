name: Django CI

on:
  push:
    branches-ignore:
      - main

jobs:

  build:
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres:12.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: {% raw %}${{ runner.os }}-pip-${{ hashFiles('**/requirements/local.txt') }}{% endraw %}
        restore-keys: |
          {% raw %}${{ runner.os }}-pip-{% endraw %}
    - name: psycopg2 prerequisites
      run: sudo apt-get install python-dev libpq-dev
    - name: graphviz prerequisites
      run: sudo apt-get install graphviz libgraphviz-dev pkg-config
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2
        pip install -r requirements/local.txt
    - name: create env file
      run: |
        touch {{cookiecutter.project_slug}}/.env
        echo DEBUG=off >> {{cookiecutter.project_slug}}/.env
        echo SECRET_KEY={% raw %}${{ secrets.SECRET_KEY }}{% endraw %} >> {{cookiecutter.project_slug}}/.env
        echo STATICFILES_STORAGE={% raw %}${{ secrets.STATICFILES_STORAGE }}{% endraw %} >> {{cookiecutter.project_slug}}/.env
    - name: Run migrations
      run: python manage.py migrate
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
        aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
        aws-region: us-west-1
    - name: Run tests
      run: coverage run -m pytest

    - name: deploy code
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: {% raw %}${{ secrets.SSH_HOST_TEST }}{% endraw %}
        key: {% raw %}${{ secrets.SSH_KEY_TEST }}{% endraw %}
        username: {% raw %}${{ secrets.SSH_USERNAME }}{% endraw %}

        script: |
          rm -rf {{cookiecutter.project_slug}}
          git clone --branch dev git@github.com:ryancheley/{{cookiecutter.project_slug}}.git

          source /home/{{cookiecutter.project_slug}}/venv/bin/activate

          cd /home/{{cookiecutter.project_slug}}/

          rm -rf /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}

          cp -r /root/{{cookiecutter.project_slug}}/ /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}

          cp /home/{{cookiecutter.project_slug}}/.env /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/.env

          pip -q install -r /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/requirements.txt

          python /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/manage.py migrate

          mkdir /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/static
          mkdir /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/staticfiles

          python /home/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/manage.py collectstatic --noinput -v0

          systemctl daemon-reload
          systemctl restart {{cookiecutter.project_slug}}